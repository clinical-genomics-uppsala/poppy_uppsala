__author__ = "Arielle R. Munters"
__copyright__ = "Copyright 2024, Arielle R. Munters"
__email__ = "arielle.munters@scilifelab.uu.se"
__license__ = "GPL-3"


# Include pipeline specific rules
include: "rules/common.smk"
include: "rules/results_report.smk"


# 'All' rule, must be specified before any other modules are
# included, since they also contain 'All' rule
rule all:
    input:
        compile_output_file_list,


# Include modules
module poppy:
    snakefile:
        "../../poppy/workflow/Snakefile"
    config:
        config


use rule * from poppy exclude all


module qc:
    snakefile:
        github(
            "hydra-genetics/qc",
            path="workflow/Snakefile",
            tag="v0.4.1",
        )
    config:
        config


use rule mosdepth_bed from qc as qc_mosdepth_bed_coding with:
    input:
        bam="alignment/samtools_merge_bam/{sample}_{type}.bam",
        bai="alignment/samtools_merge_bam/{sample}_{type}.bam.bai",
        bed=config.get("reference", {}).get("exon_bed", ""),
    output:
        bed=temp("qc/mosdepth_bed_coding/{sample}_{type}.regions.bed.gz"),
        bed_csi=temp("qc/mosdepth_bed_coding/{sample}_{type}.regions.bed.gz.csi"),
        coverage=temp("qc/mosdepth_bed_coding/{sample}_{type}.per-base.bed.gz"),
        coverage_csi=temp("qc/mosdepth_bed_coding/{sample}_{type}.per-base.bed.gz.csi"),
        glob=temp("qc/mosdepth_bed_coding/{sample}_{type}.mosdepth.global.dist.txt"),
        region=temp("qc/mosdepth_bed_coding/{sample}_{type}.mosdepth.region.dist.txt"),
        summary=temp("qc/mosdepth_bed_coding/{sample}_{type}.mosdepth.summary.txt"),
    params:
        extra=config.get("mosdepth_bed", {}).get("extra", ""),
    log:
        "qc/mosdepth_bed_coding/{sample}_{type}.mosdepth.summary.txt.log",
    benchmark:
        repeat(
            "qc/mosdepth_bed_coding/{sample}_{type}.mosdepth.summary.txt.benchmark.tsv",
            config.get("mosdepth_bed", {}).get("benchmark_repeats", 1),
        )
